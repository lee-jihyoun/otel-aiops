# Copyright The OpenTelemetry Authors
# SPDX-License-Identifier: Apache-2.0

receivers:
  otlp:
    protocols:
      grpc:
        endpoint: ${env:OTEL_COLLECTOR_HOST}:${env:OTEL_COLLECTOR_PORT_GRPC}
      http:
        endpoint: ${env:OTEL_COLLECTOR_HOST}:${env:OTEL_COLLECTOR_PORT_HTTP}
        cors:
          allowed_origins:
            - "http://*"
            - "https://*"
  httpcheck/frontendproxy:
    targets:
      - endpoint: http://frontendproxy:${env:ENVOY_PORT}
  docker_stats:
    endpoint: unix:///var/run/docker.sock
  redis:
    endpoint: "valkey-cart:6379"
    username: "valkey"
    collection_interval: 10s
  # Host metrics
  hostmetrics:
    root_path: /hostfs
    scrapers:
      cpu:
        metrics:
          system.cpu.utilization:
            enabled: true
      disk:
      load:
      filesystem:
        exclude_mount_points:
          mount_points:
            - /dev/*
            - /proc/*
            - /sys/*
            - /run/k3s/containerd/*
            - /var/lib/docker/*
            - /var/lib/kubelet/*
            - /snap/*
          match_type: regexp
        exclude_fs_types:
          fs_types:
            - autofs
            - binfmt_misc
            - bpf
            - cgroup2
            - configfs
            - debugfs
            - devpts
            - devtmpfs
            - fusectl
            - hugetlbfs
            - iso9660
            - mqueue
            - nsfs
            - overlay
            - proc
            - procfs
            - pstore
            - rpc_pipefs
            - securityfs
            - selinuxfs
            - squashfs
            - sysfs
            - tracefs
          match_type: strict
      memory:
        metrics:
          system.memory.utilization:
            enabled: true
      network:
      paging:
      processes:
      process:
        mute_process_exe_error: true
        mute_process_io_error: true
        mute_process_user_error: true
  # Collector metrics
  prometheus:
    config:
      scrape_configs:
        - job_name: 'otelcol'
          scrape_interval: 10s
          static_configs:
            - targets: ['0.0.0.0:8888']

exporters:
  file:
    path: "/etc/example.json"
    
  file/original_logs:
    path: "/etc/original_logs.json"
  file/filtered_logs:
    path: "/etc/filtered_logs.json"
  file/original_span:
    path: "/etc/original_span.json"
  file/filtered_span:
    path: "/etc/filtered_span.json"
  file/test:
    path: "/etc/test_span.json"
  file/metrics:
    path: "/etc/original_metrics.json"
    
  debug:
  otlp:
    endpoint: "jaeger:4317"
    tls:
      insecure: true
  otlphttp/prometheus:
    endpoint: "http://prometheus:9090/api/v1/otlp"
    tls:
      insecure: true
  opensearch:
    logs_index: otel
    http:
      endpoint: "http://opensearch:9200"
      tls:
        insecure: true

processors:
  batch:
  transform:
    error_mode: ignore
    trace_statements:
      - context: span
        statements:
          # could be removed when https://github.com/vercel/next.js/pull/64852 is fixed upstream
          - replace_pattern(name, "\\?.*", "")
          - replace_match(name, "GET /api/products/*", "GET /api/products/{productId}")
          
  filter/logs:
    logs:
      log_record:
        - 'severity_number < 10'
        
  filter/error_spans:
    traces:
      span:
        - 'status.code != 2'

  filter/test:
    traces:
      span:
        - 'attributes["exception.message"] == nil'

  attributes/spans:
    actions:
      - key: network.peer.address
        action: delete
      - key: server.address
        action: delete
      - key: client.address
        action: delete
      - key: network.protocol.version
        action: delete
      - key: network.peer.port
        action: delete
      - key: user_agent.original
        action: delete
      - key: url.scheme
        action: delete
      - key: thread.name
        action: delete


connectors:
  spanmetrics:

service:
  pipelines:
    traces:
      receivers: [otlp]
      processors: [transform, batch]
      exporters: [otlp, debug, spanmetrics, file/original_span]
    metrics:
      receivers: [hostmetrics, docker_stats, httpcheck/frontendproxy, otlp, prometheus, redis, spanmetrics]
      processors: [batch]
      exporters: [otlphttp/prometheus, debug, file/metrics]
    logs:
      receivers: [otlp]
      processors: [batch]
      exporters: [opensearch, debug, file/original_logs]
      
    logs/filtered:
      receivers: [otlp]
      processors: [batch, filter/logs]
      exporters: [file/filtered_logs]
      
    traces/error:
      receivers: [otlp]
      processors: [filter/error_spans]
      exporters: [file/filtered_span]

    traces/test:
      receivers: [otlp]
      processors: [filter/test]
      exporters: [file/test]